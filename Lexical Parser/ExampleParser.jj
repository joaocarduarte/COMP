options {
    IGNORE_CASE = true;
    LOOKAHEAD = 1;
}

PARSER_BEGIN(ExampleParser)

public class ExampleParser {
    public static void main(String args[]) throws ParseException {
        ExampleParser parser;
        parser = new ExampleParser(System.in);
        parser.start();
      }
}

PARSER_END(ExampleParser)

SKIP : {
  " "
  | "\t"
  | "\n"
  | "\r"
}

//Reserved words
TOKEN: {
    <NAME: "\"name\""":" >
    | <CHILDREN: "\"children\"" ":">
    | <CONTENT: "\"content\"" ":">
    | <CODE: "\"code\"" ":">
}

TOKEN: {
    //<STRING_NAME: "\""(["a"-"z","A"-"Z"])+ "\"">
     <STRING_NAME_CONTENT: "\""(["(", ")", "<", ">", ".", ":", "\"", "a"-"z", "A"-"Z"])* "\"" ",">
    | <STRING_CODE: "\""("(""/" (["a"-"z","A"-"Z"])+ ")")? "\"" ",">
  //  | <STRING_CHILDREN: (<NAME> <STRING_NAME>) (<CONTENT> <STRING_CONTENT>)? (<CODE> <STRING_CODE>)? >
}

void start() : {} {

  expr() ","

}

void expr() : {} {
  "{" <NAME> <STRING_NAME_CONTENT> (<CONTENT> <STRING_NAME_CONTENT>)? (<CODE> <STRING_CODE>)? <CHILDREN> "[" (expr())* "]" "," "}"
}
