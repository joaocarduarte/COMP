/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExampleParser.jj */
/*@egen*/options {
    IGNORE_CASE = true;
    LOOKAHEAD = 1;
    FORCE_LA_CHECK = true;
}

PARSER_BEGIN(ExampleParser)

public class ExampleParser/*@bgen(jjtree)*/implements ExampleParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTExampleParserState jjtree = new JJTExampleParserState();

/*@egen*/
    public static void main(String args[]) throws ParseException, java.io.FileNotFoundException {
        ExampleParser parser;
        parser = new ExampleParser(new java.io.FileInputStream(args[0]));
        SimpleNode root = parser.start();
        //root.dump("");
        root.printstuff("");
        root.showGraph();
      }
}

PARSER_END(ExampleParser)

SKIP : {
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

// comments: not really part of JSON spec, but parser shouldn't blow-up if present
SKIP: {
        //single-line 'C'-style comments
        < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

//Reserved words
TOKEN: {
    <NAME: "\"" "name" "\"">
    | <CHILDREN: "\"""children""\"">
    | <CONTENT: "\"""content""\"">
    | <CODE: "\"" "code" "\"">
}

// JSON operators (prefix with O_ to avoid naming conflicts)
TOKEN: {
        <O_OPENBRACE: "{">
    |   <O_CLOSEBRACE: "}">
    |   <O_OPENBRACKET: "[">
    |   <O_CLOSEBRACKET: "]">
    |   <O_COMMA: ",">
    |   <O_COLON: ":">
    |   <O_DOT: ".">
    |   <O_PLUS: "+">
    |   <O_MINUS: "-">
    |   <O_QUOTATIONMARKS: "\"">
    |   <O_OPENPARENTHESIS: "(">
    |   <O_CLOSEPARENTHESIS: ")">
    |   <O_SLASH: "/">
}

// numeric literals
TOKEN: {
    <#DIGIT: ["0"-"9"]>
 |  <#LETTER: ["a" - "z", "A" - "Z"]>
 |  <#SPACE: [" "]>
}



//Strings
TOKEN: {
   <ARRAY: <O_QUOTATIONMARKS> (<LETTER>)+ (":") (<LETTER>)+ <O_QUOTATIONMARKS> >
| < PACKAGE: <O_QUOTATIONMARKS> (<LETTER>)+ (".") (<LETTER>)+ <O_OPENPARENTHESIS> <O_CLOSEPARENTHESIS> <O_QUOTATIONMARKS> >    
|    <STRING_NAME: <O_QUOTATIONMARKS> (<LETTER>)+ <O_QUOTATIONMARKS> >
|  <STRING_CONTENT: <O_QUOTATIONMARKS> (("<")? ((<LETTER> | <DIGIT> )* (<O_OPENPARENTHESIS>)? (<SPACE> (<LETTER> | <DIGIT>)*)? (<O_CLOSEPARENTHESIS>)? (">")? (<O_DOT>)? (<LETTER>)*  | <QUOTED_STRING> )
| ("==") | ("_++") | ("_--") | ("+")
) <O_QUOTATIONMARKS> >



|  <STRING_CODE: <O_QUOTATIONMARKS> <O_OPENPARENTHESIS> (<O_SLASH> (<LETTER> | <SPACE> | <DIGIT>)+)+ <O_DOT> (<LETTER> | <SPACE> | <DIGIT>)+ <O_COLON> (<DIGIT>)+ <O_CLOSEPARENTHESIS> <O_QUOTATIONMARKS> >
}

// string literals
TOKEN: {
        <QUOTED_STRING: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"">
    |   <SINGLE_QUOTED_STRING: "\'" ( (~["\'","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\'"] ) ) )* "\'">
}

SimpleNode start() : {/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) start */
  try {
/*@egen*/
  expr1() <EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expr1()       : {/*@bgen(jjtree) NODE */
                      SimpleNode jjtn000 = new SimpleNode(JJTNODE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) NODE */
  try {
/*@egen*/
	
  <O_OPENBRACE> <NAME> <O_COLON> t = <STRING_NAME> <O_COMMA> {jjtn000.name = t.image;}
  (<CONTENT> <O_COLON>  (t = <STRING_CONTENT> | t = <STRING_NAME> | t=<ARRAY> | t=< PACKAGE >)  <O_COMMA> {jjtn000.content = t.image;})?
  (<CODE> <O_COLON> t = <STRING_CODE> <O_COMMA> {jjtn000.code = t.image;})?  <CHILDREN> <O_COLON> <O_OPENBRACKET> (expr1())? (<O_COMMA> expr1())* <O_CLOSEBRACKET> <O_COMMA>  <O_CLOSEBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}