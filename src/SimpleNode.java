import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import graphviz.GraphViz;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id; 
	protected Object value;
	protected Object name;
	protected Object content;
	protected Object code;
	protected ExampleParser parser;
	protected  static Boolean foundmain = false;


	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(ExampleParser p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) { parent = n; }
	public Node jjtGetParent() { return parent; }

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) { this.value = value; }
	public Object jjtGetValue() { return value; }

	/* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

	public String toString() { return ExampleParserTreeConstants.jjtNodeName[id]; }
	public String toString(String prefix) { return prefix + toString(); }

	/* Override this method if you want to customize how the node dumps
     out its children. */

	public void dump(String prefix) {
		System.out.println(toString(prefix) + name);
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode)children[i];
				if (n != null) {
					//	System.out.println(value);
					n.dump(prefix + " ");
				}
			}
		}
	}
	public void printstuff(String prefix){
		//System.out.println(value);
		PrintWriter writer = null;
		try {
			writer = new PrintWriter("dotfile.dot", "UTF-8");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		writer.println("digraph graphname{");
		//drawtherest(writer,prefix,prefix);
		ArrayList<String> order = new ArrayList<String>();
		filter(writer,prefix, order);
		writer.println("}");
		writer.close();
	}

	private void drawtherest(PrintWriter writer,String prefix,String parent) {
		// TODO Auto-generated method stub
		//writer.println(";");
		/*
	if (children != null) {
	      for (int i = 0; i < children.length; ++i) {
	        SimpleNode n = (SimpleNode)children[i];
	        if (n != null) {
	        writer.println(n.jjtGetParent() + "--" + n.jjtGetValue());
	        n.drawtherest(writer, prefix);
	        }
	      }
	    }
		 */
		String temp;
		if (this.children != null) {
			for (int i = 0; i < this.children.length; ++i) {
				SimpleNode n = (SimpleNode)this.children[i];
				SimpleNode p = (SimpleNode)n.parent;
				writer.println(p.name + " -- " + n.name + ";");
				if(n != null)
					//  writer.print("gotcha");

					n.drawtherest(writer, prefix,prefix);
			}
		}
	}

	public void filter(PrintWriter writer,String string, ArrayList<String> order) {
		// TODO Auto-generated method stub
		String temp;
		ArrayList<String> lastConditioned = new ArrayList<String> ();
		if (this.children != null) {
			for (int i = 0; i < this.children.length; ++i) {
				SimpleNode n = (SimpleNode)this.children[i];
				SimpleNode p = (SimpleNode)n.parent;
				//				if(foundmain)
				//				{	
				//					if(n.name.equals("\"Block\""))
				//						analyzeblock(n);
				//
				//				}
				if(n.name!=null){
					if(n.name.equals("\"Method\"")){
						if(n.content.equals("\"main\"")){ //para o caso do main
							SimpleNode c = (SimpleNode)n.children[0];
							foundmain = true;

							if(n.children.length == 2) //estamos a contar que exista sempre Block
								writer.println(")");
							else {

								for (int j = 1; j < n.children.length - 1; j++) { 
									String mainSentence = "\"" + removeQuotationMarks(c.content) + " " + removeQuotationMarks(n.content) +"(";
									c = (SimpleNode)n.children[j];
									SimpleNode cc = (SimpleNode)c.children[0];

									if(cc.name.equals("\"TypeReference\"")) //se for typereference nao tem mais filhos
										mainSentence += removeQuotationMarks(cc.content) + " " + removeQuotationMarks(c.content);

									if(cc.name.equals("\"ArrayTypeReference\"")){ //se for arraytypereference tem mais um filho
										SimpleNode ccc = (SimpleNode)cc.children[0];
										mainSentence += removeQuotationMarks(ccc.content) + "[] " + removeQuotationMarks(c.content);
									}

									if(j == n.children.length - 2){
										mainSentence += ")\"";
										order.add(mainSentence);
										writer.print(order.get(0));
										break;
									}
									else {
										mainSentence += ", ";
									}
								}			
							}
							SimpleNode block = (SimpleNode)n.children[n.children.length-1];
							analyzeBlock(block, writer);
						}
					}
				}
				//System.out.println(n.name);
				if(n != null)
					//  writer.print("gotcha");

					n.filter(writer, string, order);
			}
		}

	}

	String removeQuotationMarks(Object content2)
	{
		String operation1 = ((String) content2).substring(1, ((String) content2).length() - 1);
		return operation1;
	}

	private void analyzeBlock(SimpleNode block, PrintWriter writer) {
		for(int k = 0; k < block.children.length; k++)
		{
			SimpleNode c = (SimpleNode)block.children[k];

			////////////////////////////////////////// BEGIN IF
			if(c.name.equals("\"If\"") && k + 1 < block.children.length) 
			{
				analyzeIf(c, writer, (SimpleNode)block.children[k+1]);
				writer.print(analyzeLine((SimpleNode)block.children[k+1]));
				k++;
			}
			else if(c.name.equals("\"If\"")) 
			{
				analyzeIf(c, writer);
			}
			//////////////////////////////////////////END IF

			else{ 	//imprime tudo que nao ï¿½ ifs, fors e whiles
				writer.print( " -> " +analyzeLine(c));
			}
		}
	}

	private void analyzeIf(SimpleNode c, PrintWriter writer, SimpleNode after) { // caso haja código depois do IF
		//TODO ver se after não é ciclo ou if
		
		ArrayList<String> lastConditioned = new ArrayList<String>();
		//CONDICAO
		String ifCondition = null;
		SimpleNode cc = (SimpleNode)c.children[0];
		if(cc.name.equals("\"BinaryOperator\""))	//IF DO TIPO if(a operador b)
		{
			String binaryOperator = (String) cc.content;
			String compare1 = null;
			String compare2 = null;
			SimpleNode ccc = (SimpleNode)cc.children[1];
			if(ccc.name.equals("\"VariableRead\""))
			{
				SimpleNode cccc = (SimpleNode)ccc.children[1];
				compare1 = (String) cccc.content;
			}	
			else if(ccc.name.equals("\"Literal\""))
			{
				compare1 = (String) ccc.content;
			}
			ccc = (SimpleNode)cc.children[2];
			if(ccc.name.equals("\"VariableRead\""))
			{
				SimpleNode cccc = (SimpleNode)ccc.children[1];
				compare2 = (String) cccc.content;
			}	
			else if(ccc.name.equals("\"Literal\""))
			{
				compare2 = (String) ccc.content;
			}
			ifCondition = "\"If(" + removeQuotationMarks(compare1) + removeQuotationMarks(binaryOperator) + removeQuotationMarks(compare2) + ")\"";	
			writer.println(" -> " + ifCondition);
		}
		//CONDICIONADOS
		String lastLine = "";			//*ultima linha para ser adicionado ao arraylist*
		cc = (SimpleNode)c.children[1];			//CONDICIONADO TRUE
		writer.print(ifCondition);
		if(cc.name.equals("\"Block\"")){	//caso seja um block
			for(int l = 0; l < cc.children.length; l++)		
			{
				SimpleNode ccc = (SimpleNode)cc.children[l];

				lastLine = " -> " + analyzeLine(cc);
				writer.print(lastLine);

				if(l == (cc.children.length - 1)){
					lastConditioned.add(lastLine);
					writer.println("[label=\"true\"]");
					writer.println(lastLine + " -> " + analyzeLine(after));
				}
			}
		}
		else{								//caso seja uma linha so -> ligar código dentro do if ao restante código do block
			lastLine = analyzeLine(cc);
			writer.print(" -> " + lastLine);
			lastConditioned.add(lastLine);
			writer.println("[label=\"true\"]");
			writer.println(lastLine + " -> " + analyzeLine(after));
		}

		if(c.children.length > 1)
		{
			cc = (SimpleNode)c.children[2];			//CONDICIONADO FALSE(caso exista)
			writer.print(ifCondition);
			if(cc.name.equals("\"Block\"")){	//caso seja um bloco
				for(int l = 0; l < cc.children.length; l++)	
				{
					SimpleNode ccc = (SimpleNode)cc.children[l];

					lastLine = " -> " + analyzeLine(cc);
					writer.print(lastLine);

					if(l == (cc.children.length - 1)){
						lastConditioned.add(lastLine);
						writer.println("[label=\"false\"]");
						writer.println(lastLine + " -> " + analyzeLine(after));
					}
				}
			}
			else{								//caso seja uma linha so
				lastLine = analyzeLine(cc);
				writer.print(" -> " + lastLine);
				lastConditioned.add(lastLine);
				writer.print("[label=\"false\"]");
				writer.println(lastLine + " -> " + analyzeLine(after));
			}
		}	
		
	}

	private void analyzeIf(SimpleNode c, PrintWriter writer) {
		ArrayList<String> lastConditioned = new ArrayList<String>();
		//CONDICAO
		String ifCondition = null;
		SimpleNode cc = (SimpleNode)c.children[0];
		if(cc.name.equals("\"BinaryOperator\""))	//IF DO TIPO if(a operador b)
		{
			String binaryOperator = (String) cc.content;
			String compare1 = null;
			String compare2 = null;
			SimpleNode ccc = (SimpleNode)cc.children[1];
			if(ccc.name.equals("\"VariableRead\""))
			{
				SimpleNode cccc = (SimpleNode)ccc.children[1];
				compare1 = (String) cccc.content;
			}	
			else if(ccc.name.equals("\"Literal\""))
			{
				compare1 = (String) ccc.content;
			}
			ccc = (SimpleNode)cc.children[2];
			if(ccc.name.equals("\"VariableRead\""))
			{
				SimpleNode cccc = (SimpleNode)ccc.children[1];
				compare2 = (String) cccc.content;
			}	
			else if(ccc.name.equals("\"Literal\""))
			{
				compare2 = (String) ccc.content;
			}
			ifCondition = "\"If(" + removeQuotationMarks(compare1) + removeQuotationMarks(binaryOperator) + removeQuotationMarks(compare2) + ")\"";	
			writer.println(" -> " + ifCondition);
		}
		//CONDICIONADOS
		String lastLine = "";			//*ultima linha para ser adicionado ao arraylist*
		cc = (SimpleNode)c.children[1];			//CONDICIONADO TRUE
		writer.print(ifCondition);
		if(cc.name.equals("\"Block\"")){	//caso seja um block
			for(int l = 0; l < cc.children.length; l++)		
			{
				SimpleNode ccc = (SimpleNode)cc.children[l];

				lastLine = " -> " + analyzeLine(cc);
				writer.print(lastLine);

				if(l == (cc.children.length - 1)){
					lastConditioned.add(lastLine);
					writer.println("[label=\"true\"]");
				}
			}
		}
		else{								//caso seja uma linha so
			lastLine = analyzeLine(cc);
			writer.print(" -> " + lastLine);
			lastConditioned.add(lastLine);
			writer.println("[label=\"false\"]");
		}

		if(c.children.length > 1)
		{
			cc = (SimpleNode)c.children[2];			//CONDICIONADO FALSE(caso exista)
			writer.print(ifCondition);
			if(cc.name.equals("\"Block\"")){	//caso seja um bloco
				for(int l = 0; l < cc.children.length; l++)	
				{
					SimpleNode ccc = (SimpleNode)cc.children[l];

					lastLine = " -> " + analyzeLine(cc);
					writer.print(lastLine);

					if(l == (cc.children.length - 1)){
						lastConditioned.add(lastLine);
						writer.println("[label=\"false\"]");
					}
				}
			}
			else{								//caso seja uma linha so
				lastLine = analyzeLine(cc);
				writer.print(" -> " + lastLine);
				lastConditioned.add(lastLine);
				writer.println("[label=\"true\"]");
			}
		}	
	}

	private String analyzeLine(SimpleNode c){
		String str = "";
	
		/////////////////////////////////////////////////////// int a = 1;
		if(c.name.equals("\"LocalVariable\""))
		{
			SimpleNode cc = (SimpleNode)c.children[0];
			if(cc.name.equals("\"TypeReference\"")) //se for typereference nao tem mais filhos
				str += "\"" + removeQuotationMarks(cc.content) + " " + removeQuotationMarks(c.content);

			else if(cc.name.equals("\"ArrayTypeReference\"")){ //se for arraytypereference tem mais um filho
				SimpleNode ccc = (SimpleNode)cc.children[0];
				str += "\"" + removeQuotationMarks(ccc.content) + "[] " + removeQuotationMarks(c.content);
			}

			if(c.children.length == 1){
				str += (";");
			}
			else{									//rever este else mais tarde
				cc = (SimpleNode)c.children[1];
				if(cc.name.equals("\"Literal\"")){
					str += " = " + removeQuotationMarks(cc.content) + ";" + "\"";
				}
				else if(cc.name.equals("\"BinaryOperator\""))
				{
					String binaryOperator = (String) cc.content;
					String compare1 = null;
					String compare2 = null;
					SimpleNode ccc = (SimpleNode)cc.children[1];
					if(ccc.name.equals("\"VariableRead\""))
					{
						SimpleNode cccc = (SimpleNode)ccc.children[1];
						compare1 = (String) cccc.content;
					}	
					else if(ccc.name.equals("\"Literal\""))
					{
						compare1 = (String) ccc.content;
					}
					ccc = (SimpleNode)cc.children[2];
					if(ccc.name.equals("\"VariableRead\""))
					{
						SimpleNode cccc = (SimpleNode)ccc.children[1];
						compare2 = (String) cccc.content;
					}	
					else if(ccc.name.equals("\"Literal\""))
					{
						compare2 = (String) ccc.content;
					}
					
					str += " = " + removeQuotationMarks(compare1) + removeQuotationMarks(binaryOperator) + removeQuotationMarks(compare2) + "\"";
				}
				else if(cc.name.equals("\"NewArray\"")){
					str += " = {";
					for(int i2 = 1;i2< cc.children.length;i2++){
						if(i2==1){
							SimpleNode arraycontent = (SimpleNode) cc.children[i2];
							str += removeQuotationMarks(arraycontent.content);
						}
						else{
							SimpleNode arraycontent = (SimpleNode) cc.children[i2];

							str += ","+removeQuotationMarks(arraycontent.content);
						}
					}

					str += "};" + "\"";
				}

			}
			return str;
		}
		/////////////////////////////////////////////////////// System.out.println()
		if(c.name.equals("\"Invocation\""))
		{
			SimpleNode cc = (SimpleNode)c.children[2];
			if(cc.name.equals("\"ExecutableReference\""))
			{
				if(cc.content.equals("\"println\""))
				{
					cc = (SimpleNode)c.children[3];
					if(cc.name.equals("\"VariableRead\"")) //Print pode ser de uma variável ou texto(else)
					{
						SimpleNode ccc = (SimpleNode)cc.children[1];
						str = "\"System.out.println(" + removeQuotationMarks(ccc.content) + ");" + "\"";

					}
					else
						str = "\"System.out.println(" + "\\" + "\"" + removeQuotationMarks(removeQuotationMarks(cc.content))+ "\\" + "\"" + ");" + "\"";
				}
			}
		}
		if(c.name.equals("\"Assignment\"")) // mudar valor variável
		{
			str += "\"";
			SimpleNode cc = (SimpleNode)c.children[1];
			if(cc.name.equals("\"VariableWrite\""))
			{
				SimpleNode ccc = (SimpleNode)cc.children[1];
				if(ccc.name.equals("\"LocalVariableReference\""))
				{
					str += removeQuotationMarks(ccc.content) + " = ";
				}
			}
			cc = (SimpleNode)c.children[2];
			if(cc.name.equals("\"Literal\""))
			{
				str += removeQuotationMarks(cc.content);
			}
			str += "\"";
			return str;
		}
		return str;
	}
	
	public void showGraph()
	{
		GraphViz gv = new GraphViz();
		String input = "dotfile.dot";
		gv.readSource(input);
		
		String type = "png";
				
		File out = new File("output." + type); 
				
		gv.writeGraphToFile( gv.getGraph(gv.getDotSource(), type), out );
		
		Desktop dt = Desktop.getDesktop();
	    try {
			dt.open(out);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

/* JavaCC - OriginalChecksum=dc9708b1c46ec8e86a717c9e8819eba5 (do not edit this line) */